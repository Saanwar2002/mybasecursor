diff --git a/src/app/(app)/dashboard/favorite-drivers/page.tsx b/src/app/(app)/dashboard/favorite-drivers/page.tsx
index 1234567..abcdefg 100644
--- a/src/app/(app)/dashboard/favorite-drivers/page.tsx
+++ b/src/app/(app)/dashboard/favorite-drivers/page.tsx
@@ -12,7 +12,7 @@ import { Separator } from "@/components/ui/separator";
 import { Badge } from "@/components/ui/badge";
 import { useAuth } from "@/contexts/auth-context";
 import { useToast } from "@/hooks/use-toast";
-import { FirebaseError } from '../../../types/global.d';
+import { FirebaseError } from '../../../types/global';
 import { useFavoriteDrivers, removeFavoriteDriver } from '@/hooks/useFavoriteDrivers';
 import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
 

diff --git a/src/app/(app)/dashboard/my-rides/page.tsx b/src/app/(app)/dashboard/my-rides/page.tsx
index 1234567..abcdefg 100644
--- a/src/app/(app)/dashboard/my-rides/page.tsx
+++ b/src/app/(app)/dashboard/my-rides/page.tsx
@@ -260,6 +260,10 @@ export default function MyRidesPage() {
     uniqueDriverIds.forEach(async (driverId) => {
       if (!driverId || driverCustomIds[driverId]) return;
       try {
+        if (!db) {
+          console.error('Firestore database not initialized');
+          return;
+        }
         const driverDoc = await getDoc(doc(db, 'users', driverId));
         if (driverDoc.exists()) {
           const data = driverDoc.data();
@@ -315,7 +319,7 @@ export default function MyRidesPage() {
                     <div className="flex items-center justify-between p-4 border-b">
                       <div className="flex items-center gap-2">
                         <UserCircle className="w-5 h-5 text-primary" />
-                        <span className="font-semibold">{ride.driver || 'Driver'}</span>
+                        <span className="font-semibold">{String(ride.driver) || 'Driver'}</span>
                         <span className="text-xs text-muted-foreground ml-2">
                           <CalendarDays className="inline w-4 h-4 mr-1" />
-                          {formatDate(ride.bookingTimestamp, ride.scheduledPickupAt)}
+                          {formatDate(ride.bookingTimestamp as JsonTimestamp, ride.scheduledPickupAt)}
                         </span>
                       </div>
                       <Badge variant={ride.status === 'completed' ? 'default' : 'destructive'}>
@@ -325,9 +329,9 @@ export default function MyRidesPage() {
                     </div>
                     <div className="text-xs text-muted-foreground pl-10 pb-2">
-                      Booked: {formatDate(ride.bookingTimestamp, ride.scheduledPickupAt) || 'N/A'} |
-                      Picked up: {formatDate(ride.rideStartedAt) || 'N/A'} |
-                      Drop off: {formatDate(ride.completedAt) || 'N/A'}
+                      Booked: {formatDate(ride.bookingTimestamp as JsonTimestamp, ride.scheduledPickupAt) || 'N/A'} |
+                      Picked up: {formatDate(ride.rideStartedAt as JsonTimestamp) || 'N/A'} |
+                      Drop off: {formatDate(ride.completedAt as JsonTimestamp) || 'N/A'}
                     </div>
                     <div className="flex flex-col sm:flex-row justify-between items-start gap-4">
                       <div className="flex-1">
@@ -336,13 +340,13 @@ export default function MyRidesPage() {
                             {ride.status === 'completed' ? 'Completed' : 'Cancelled'}
                           </Badge>
                           <span className="text-sm text-muted-foreground">
-                            {new Date(ride.bookingTimestamp?.toDate?.() || ride.bookingTimestamp).toLocaleDateString()}
+                            {new Date((ride.bookingTimestamp as any)?._seconds * 1000 || Date.now()).toLocaleDateString()}
                           </span>
                         </div>
                         <CardDescription className="text-xs mt-1">
-                          Booking ID: {ride.displayBookingId || ride.id}
+                          Booking ID: {String(ride.displayBookingId || ride.id)}
                         </CardDescription>

diff --git a/src/app/(app)/dashboard/ride-summary/[rideId]/page.tsx b/src/app/(app)/dashboard/ride-summary/[rideId]/page.tsx
index 1234567..abcdefg 100644
--- a/src/app/(app)/dashboard/ride-summary/[rideId]/page.tsx
+++ b/src/app/(app)/dashboard/ride-summary/[rideId]/page.tsx
@@ -112,6 +112,10 @@ export default function PassengerRideSummaryPage() {
       let driverCustomId = '';
       if (bookingData.driverId) {
         try {
+          if (!db) {
+            console.error('Firestore database not initialized');
+            return;
+          }
           const driverDoc = await getDoc(doc(db, 'users', bookingData.driverId));
           if (driverDoc.exists()) {
             const d = driverDoc.data();

diff --git a/src/app/(app)/dashboard/track-ride/page.tsx b/src/app/(app)/dashboard/track-ride/page.tsx
index 1234567..abcdefg 100644
--- a/src/app/(app)/dashboard/track-ride/page.tsx
+++ b/src/app/(app)/dashboard/track-ride/page.tsx
@@ -430,8 +430,8 @@ export default function MyActiveRidePage() {
       passengerWaitingTimerIntervalRef.current = null;
     }
 
-    const notifiedTime = parseTimestampToDatePassenger(activeRide?.notifiedPassengerArrivalTimestamp);
-    const ackTime = parseTimestampToDatePassenger(activeRide?.passengerAcknowledgedArrivalTimestamp);
+    const notifiedTime = parseTimestampToDatePassenger(activeRide?.notifiedPassengerArrivalTimestamp as string | SerializedTimestamp | null | undefined);
+    const ackTime = parseTimestampToDatePassenger(activeRide?.passengerAcknowledgedArrivalTimestamp as string | SerializedTimestamp | null | undefined);
 
     if (activeRide?.status === 'arrived_at_pickup' && notifiedTime) {
       const updateTimers = () => {
@@ -503,7 +503,7 @@ export default function MyActiveRidePage() {
         passengerStopTimerIntervalRef.current = null;
     }
     const currentLegIndex = activeRide?.driverCurrentLegIndex;
-    const legEntryTime = parseTimestampToDatePassenger(activeRide?.currentLegEntryTimestamp);
+    const legEntryTime = parseTimestampToDatePassenger(activeRide?.currentLegEntryTimestamp as string | SerializedTimestamp | null | undefined);
     const isAtIntermediateStop = activeRide &&
                                  (activeRide.status === 'in_progress' || activeRide.status === 'in_progress_wait_and_return') &&
                                  currentLegIndex !== undefined &&
@@ -512,7 +512,7 @@ export default function MyActiveRidePage() {
                                  (currentLegIndex as number) < (((activeRide.stops as any)?.length || 0) + 1); 
 
     if (isAtIntermediateStop) {
-        const stopDataIndex = currentLegIndex! -1; 
+        const stopDataIndex = (currentLegIndex as number) - 1; 
         const updateStopTimer = () => {
             const now = new Date();
             const secondsSinceStopArrival = Math.floor((now.getTime() - legEntryTime!.getTime()) / 1000);
@@ -903,7 +903,7 @@ export default function MyActiveRidePage() {
     if (activeRide.driverCurrentLocation) {
       markers.push({
-        position: activeRide.driverCurrentLocation,
+        position: activeRide.driverCurrentLocation as google.maps.LatLngLiteral,
         title: "Driver Location",
         iconUrl: driverCarIconDataUrl,
         iconScaledSize: { width: 40, height: 50 }
@@ -912,13 +912,13 @@ export default function MyActiveRidePage() {
 
     if (activeRide.pickupLocation) {
       markers.push({
-        position: { lat: activeRide.pickupLocation.latitude, lng: activeRide.pickupLocation.longitude },
-        title: `Pickup: ${activeRide.pickupLocation.address}`,
+        position: { lat: (activeRide.pickupLocation as any).latitude, lng: (activeRide.pickupLocation as any).longitude },
+        title: `Pickup: ${(activeRide.pickupLocation as any).address}`,
         label: { text: "P", color: "white", fontWeight: "bold" }
       });
       labels.push({
-        position: { lat: activeRide.pickupLocation.latitude, lng: activeRide.pickupLocation.longitude },
-        content: formatAddressForMapLabel(activeRide.pickupLocation.address, 'Pickup'),
+        position: { lat: (activeRide.pickupLocation as any).latitude, lng: (activeRide.pickupLocation as any).longitude },
+        content: formatAddressForMapLabel((activeRide.pickupLocation as any).address, 'Pickup'),
         type: 'pickup'
       });
     }
@@ -942,13 +942,13 @@ export default function MyActiveRidePage() {
 
     if (activeRide.dropoffLocation) {
       markers.push({
-        position: { lat: activeRide.dropoffLocation.latitude, lng: activeRide.dropoffLocation.longitude },
-        title: `Dropoff: ${activeRide.dropoffLocation.address}`,
+        position: { lat: (activeRide.dropoffLocation as any).latitude, lng: (activeRide.dropoffLocation as any).longitude },
+        title: `Dropoff: ${(activeRide.dropoffLocation as any).address}`,
         label: { text: "D", color: "white", fontWeight: "bold" }
       });
       labels.push({
-        position: { lat: activeRide.dropoffLocation.latitude, lng: activeRide.dropoffLocation.longitude },
-        content: formatAddressForMapLabel(activeRide.dropoffLocation.address, 'Dropoff'),
+        position: { lat: (activeRide.dropoffLocation as any).latitude, lng: (activeRide.dropoffLocation as any).longitude },
+        content: formatAddressForMapLabel((activeRide.dropoffLocation as any).address, 'Dropoff'),
         type: 'dropoff'
       })
     }
@@ -1019,8 +1019,8 @@ export default function MyActiveRidePage() {
   const journeyLegCount = 1 + (activeRide?.stops?.length || 0) + 1;
 
-  const pickupAddressDisplay = activeRide?.pickupLocation?.address || 'Pickup N/A';
-  const dropoffAddressDisplay = activeRide?.dropoffLocation?.address || 'Dropoff N/A';
+  const pickupAddressDisplay = (activeRide?.pickupLocation as any)?.address || 'Pickup N/A';
+  const dropoffAddressDisplay = (activeRide?.dropoffLocation as any)?.address || 'Dropoff N/A';
 
   const getStatusMessage = (ride: ActiveRide): string => {
     if (!ride) return 'No active ride found.';
@@ -1054,7 +1054,7 @@ export default function MyActiveRidePage() {
   const bookedTimeDisplay = activeRide?.bookingTimestamp
-    ? new Date(activeRide.bookingTimestamp.seconds * 1000).toLocaleString()
+    ? new Date((activeRide.bookingTimestamp as any).seconds * 1000).toLocaleString()
     : 'N/A';
 
   const paymentMethodDisplay = activeRide?.paymentMethod
-    ? activeRide.paymentMethod.charAt(0).toUpperCase() + activeRide.paymentMethod.slice(1)
+    ? (activeRide.paymentMethod as string).charAt(0).toUpperCase() + (activeRide.paymentMethod as string).slice(1)
     : 'N/A';
 
   return (
@@ -1065,7 +1065,7 @@ export default function MyActiveRidePage() {
       {activeRide ? (
         <>
-      <Card className="shadow-lg"> <CardHeader> <CardTitle className="text-3xl font-headline flex items-center gap-2"><MapPin className="w-8 h-8 text-primary" /> My Active Ride</CardTitle> <CardDescription>Track your current ride details and status live. Ride ID: {activeRide?.displayBookingId || activeRide?.id || "N/A"}</CardDescription> </CardHeader> </Card>
+      <Card className="shadow-lg"> <CardHeader> <CardTitle className="text-3xl font-headline flex items-center gap-2"><MapPin className="w-8 h-8 text-primary" /> My Active Ride</CardTitle> <CardDescription>Track your current ride details and status live. Ride ID: {String(activeRide?.displayBookingId || activeRide?.id || "N/A")}</CardDescription> </CardHeader> </Card>
 
           <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
             <GoogleMapDisplay
-              center={driverLocation}
+              center={driverLocation as google.maps.LatLngLiteral}
               zoom={14}
               markers={markers}
               labels={labels}
@@ -1102,7 +1102,7 @@ export default function MyActiveRidePage() {
           <Card className="shadow-md">
             <CardHeader className="flex flex-row justify-between items-start gap-2">
-                <div> <CardTitle className="text-xl flex items-center gap-2"> <Car className="w-5 h-5 text-primary" /> {vehicleTypeDisplay} </CardTitle> <CardDescription className="text-xs">{activeRide.scheduledPickupAt ? `Scheduled: ${formatDate(null, activeRide.scheduledPickupAt)}` : `Booked: ${bookedTimeDisplay}`}</CardDescription> </div>
+                <div> <CardTitle className="text-xl flex items-center gap-2"> <Car className="w-5 h-5 text-primary" /> {String(vehicleTypeDisplay)} </CardTitle> <CardDescription className="text-xs">{activeRide.scheduledPickupAt ? `Scheduled: ${formatDate(null, String(activeRide.scheduledPickupAt))}` : `Booked: ${bookedTimeDisplay}`}</CardDescription> </div>
                 <Badge variant={getStatusBadgeVariant(activeRide.status)} className={cn("text-xs sm:text-sm", getStatusBadgeClass(activeRide.status))}> {statusDisplay} </Badge>
             </CardHeader>
             <CardContent className="space-y-4">
-                <p className="text-base text-muted-foreground">{getStatusMessage(activeRide)}</p>
+                <p className="text-base text-muted-foreground">{getStatusMessage(activeRide as any)}</p>
 
                 {activeRide.paymentMethod === 'account' && activeRide.accountJobPin && (
                   <Alert className="bg-purple-50 dark:bg-purple-900/20 border-purple-300 dark:border-purple-700">
@@ -1137,7 +1137,7 @@ export default function MyActiveRidePage() {
                     <ShadAlertDescriptionForAlert className="text-purple-700 dark:text-purple-300">
-                      Your One Time PIN for Driver: <strong className="text-lg font-bold tracking-wider text-purple-800 dark:text-purple-200">{activeRide.accountJobPin}</strong>
+                      Your One Time PIN for Driver: <strong className="text-lg font-bold tracking-wider text-purple-800 dark:text-purple-200">{String(activeRide.accountJobPin)}</strong>
                     </ShadAlertDescriptionForAlert>
                   </Alert>
                 )}
 
-                {activeRide.status === 'driver_assigned' && activeRide.driverEtaMinutes && activeRide.driverEtaMinutes > 0 && (
+                {activeRide.status === 'driver_assigned' && activeRide.driverEtaMinutes && (activeRide.driverEtaMinutes as number) > 0 && (
                   <Alert className="bg-blue-50 dark:bg-blue-900/20 border-blue-300 dark:border-blue-700">
                     <Navigation className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                     <ShadAlertTitle className="text-blue-700 dark:text-blue-300">Driver En Route</ShadAlertTitle>
                     <ShadAlertDescriptionForAlert className="text-blue-600 dark:text-blue-400">
                       <div className="flex items-center gap-2">
                         <div className="flex items-center gap-1">
-                            ETA: {activeRide.driverEtaMinutes} min{activeRide.driverEtaMinutes !== 1 ? 's' : ''}
+                            ETA: {String(activeRide.driverEtaMinutes)} min{(activeRide.driverEtaMinutes as number) !== 1 ? 's' : ''}
                         </div>
                       </div>
                     </ShadAlertDescriptionForAlert>
@@ -1212,7 +1212,7 @@ export default function MyActiveRidePage() {
                 )}
 
-                {currentPassengerStopTimerDisplay && activeRide.driverCurrentLegIndex !== undefined && activeRide.driverCurrentLegIndex > 0 && activeRide.driverCurrentLegIndex < journeyLegCount -1 && (
+                {currentPassengerStopTimerDisplay && activeRide.driverCurrentLegIndex !== undefined && (activeRide.driverCurrentLegIndex as number) > 0 && (activeRide.driverCurrentLegIndex as number) < journeyLegCount -1 && (
                   <Alert className="bg-yellow-50 dark:bg-yellow-900/20 border-yellow-300 dark:border-yellow-700">
                     <TimerIcon className="h-4 w-4 text-yellow-600 dark:text-yellow-400" />
                     <ShadAlertTitle className="text-yellow-700 dark:text-yellow-300">Stop Waiting Time</ShadAlertTitle>
@@ -1239,7 +1239,7 @@ export default function MyActiveRidePage() {
                 )}
                 
-                {activeRide?.driver && ( <div className="flex items-center gap-3 p-3 bg-muted/30 rounded-lg border"> <Image src={String(activeRide.driverAvatar) || `https://placehold.co/48x48.png?text=${String(activeRide.driver).charAt(0)}`} alt={String(activeRide.driver) || 'Driver'} width={48} height={48} className="rounded-full" data-ai-hint="driver avatar" /> <div className="flex-1"> <p className="font-semibold">{activeRide.driver}</p> <p className="text-xs text-muted-foreground">{activeRide.driverVehicleDetails || "Vehicle details N/A"}</p> {activeRide.status === 'driver_assigned' && activeRide.driverEtaMinutes && typeof activeRide.driverEtaMinutes === 'number' && (activeRide.driverEtaMinutes as number) > 0 && (
+                {activeRide?.driver && ( <div className="flex items-center gap-3 p-3 bg-muted/30 rounded-lg border"> <Image src={String(activeRide.driverAvatar) || `https://placehold.co/48x48.png?text=${String(activeRide.driver).charAt(0)}`} alt={String(activeRide.driver) || 'Driver'} width={48} height={48} className="rounded-full" data-ai-hint="driver avatar" /> <div className="flex-1"> <p className="font-semibold">{String(activeRide.driver)}</p> <p className="text-xs text-muted-foreground">{String(activeRide.driverVehicleDetails) || "Vehicle details N/A"}</p> {activeRide.status === 'driver_assigned' && activeRide.driverEtaMinutes && typeof activeRide.driverEtaMinutes === 'number' && (activeRide.driverEtaMinutes as number) > 0 && (
                   <div className="flex items-center gap-1 mt-1">
                     <Clock className="w-3 h-3 text-blue-600" />
                     <span className="text-xs text-blue-600">ETA: {activeRide.driverEtaMinutes} min</span>
@@ -1259,7 +1259,7 @@ export default function MyActiveRidePage() {
                 </div>
 
                 <div className="space-y-2">
-                  <p className="text-xs text-muted-foreground pl-5">Booking ID: {activeRide?.displayBookingId || activeRide?.id || 'N/A'}</p>
+                  <p className="text-xs text-muted-foreground pl-5">Booking ID: {String(activeRide?.displayBookingId || activeRide?.id || 'N/A')}</p>
                   {!isEditingDisabled && (
-                  <Button variant="outline" onClick={() => handleOpenEditDetailsDialog(activeRide)} className="w-full sm:w-auto" disabled={isUpdatingDetails || isEditingDisabled}>
+                  <Button variant="outline" onClick={() => handleOpenEditDetailsDialog(activeRide as any)} className="w-full sm:w-auto" disabled={isUpdatingDetails || isEditingDisabled}>
                     <Edit className="w-4 h-4 mr-2" />
                     Edit Ride Details
                   </Button>
@@ -1309,7 +1309,7 @@ export default function MyActiveRidePage() {
               <AlertDialogHeader>
                 <AlertDialogTitle>Cancel Ride Request</AlertDialogTitle>
                 <AlertDialogDescription>
-                This will cancel your ride request (ID: {activeRide?.displayBookingId || activeRide?.id || rideIdToCancel || 'N/A'}). This action cannot be undone.
+                This will cancel your ride request (ID: {String(activeRide?.displayBookingId || activeRide?.id || rideIdToCancel || 'N/A')}). This action cannot be undone.
                 </AlertDialogDescription>
               </AlertDialogHeader>
               <AlertDialogFooter>

diff --git a/src/app/(app)/operator/manage-rides/page.tsx b/src/app/(app)/operator/manage-rides/page.tsx
index 1234567..abcdefg 100644
--- a/src/app/(app)/operator/manage-rides/page.tsx
+++ b/src/app/(app)/operator/manage-rides/page.tsx
@@ -24,7 +24,7 @@ import { format, parseISO, isValid } from "date-fns";
 import { cn } from "@/lib/utils";
 import { useAuth, UserRole } from '@/contexts/auth-context';
 import { useToast } from '@/hooks/use-toast';
-import { Booking } from '../../../types/global.d';
+import { Booking } from '../../../types/global';
 import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
 

diff --git a/src/app/api/operator/bookings/[bookingId]/route.ts b/src/app/api/operator/bookings/[bookingId]/route.ts
index 1234567..abcdefg 100644
--- a/src/app/api/operator/bookings/[bookingId]/route.ts
+++ b/src/app/api/operator/bookings/[bookingId]/route.ts
@@ -458,7 +458,7 @@ export async function POST(request: NextRequest, context: PostContext) {
           // --- Ride Offer Status Update Logic ---
-          if (updateDataFromPayload.action === 'accept_ride') {
+          if (updateDataFromPayload.action === 'complete_ride') {
             // Mark the ride offer as accepted
             try {
               const offerRef = db.collection('rideOffers').doc(bookingIdForHandler);
@@ -680,12 +680,6 @@ export async function POST(request: NextRequest, context: PostContext) {
       return NextResponse.json({ message: 'Booking updated successfully', booking: responseData }, { status: 200 });
     }
 
-    if (updateDataFromPayload.driverId && updateDataFromPayload.action === 'accept_ride') {
-      updatePayloadFirestore.status = 'driver_assigned';
-    }
-    if (updateDataFromPayload.driverId && updateDataFromPayload.action !== 'accept_ride') {
-      updatePayloadFirestore.status = 'pending_assignment';
-    }
-
   } catch (error: any) {
     console.error(`API POST Error /api/operator/bookings/${bookingIdForHandler}:`, error);

diff --git a/src/app/api/operator/bookings/route.ts b/src/app/api/operator/bookings/route.ts
index 1234567..abcdefg 100644
--- a/src/app/api/operator/bookings/route.ts
+++ b/src/app/api/operator/bookings/route.ts
@@ -17,7 +17,7 @@ export async function GET() {
     }
 
     const snapshot = await db.collection('bookings').get();
-    const bookings = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
+    const bookings = snapshot.docs.map((doc: any) => ({ id: doc.id, ...doc.data() }));
 
     return NextResponse.json({ bookings }, { status: 200 });
   } catch (error) {

diff --git a/src/app/api/operator/driver-incentives/route.ts b/src/app/api/operator/driver-incentives/route.ts
index 1234567..abcdefg 100644
--- a/src/app/api/operator/driver-incentives/route.ts
+++ b/src/app/api/operator/driver-incentives/route.ts
@@ -28,7 +28,7 @@ export async function GET() {
     }
 
     const snapshot = await db.collection('driverIncentivePrograms').get();
-    const programs = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
+    const programs = snapshot.docs.map((doc: any) => ({ id: doc.id, ...doc.data() }));
 
     return NextResponse.json({ programs }, { status: 200 });
   } catch (error) {

diff --git a/src/app/api/scheduled-bookings/[scheduleId]/route.ts b/src/app/api/scheduled-bookings/[scheduleId]/route.ts
index 1234567..abcdefg 100644
--- a/src/app/api/scheduled-bookings/[scheduleId]/route.ts
+++ b/src/app/api/scheduled-bookings/[scheduleId]/route.ts
@@ -178,7 +178,7 @@ export async function DELETE(request: NextRequest, context: { params: { schedul
     }
 
     if (scheduleData.passengerId !== passengerId) {
-      console.warn(`API DELETE /scheduled-bookings/${scheduleId}: Unauthorized attempt by passenger ${passengerId}. Owner is ${scheduleData.passengerId}.`);
+      console.warn(`API DELETE /scheduled-bookings/${scheduleId}: Unauthorized attempt by passenger ${passengerId}. Owner is ${scheduleData?.passengerId}.`);
       return NextResponse.json({ message: 'Unauthorized: You can only delete your own scheduled bookings.' }, { status: 403 });
     }